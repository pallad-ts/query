// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`QueryBuilder filters uses filters schema if provided failure 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "filters.foo is a required field",
      "path": [
        "filters",
        "foo",
      ],
    },
  ],
}
`;

exports[`QueryBuilder pagination by cursor allows "after" cursor property fails if not a string 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "after must be a \`string\` type, but the final value was: \`[]\`.",
      "path": [
        "after",
      ],
    },
  ],
}
`;

exports[`QueryBuilder pagination by cursor allows "before" cursor property fails if not a string 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "before must be a \`string\` type, but the final value was: \`[]\`.",
      "path": [
        "before",
      ],
    },
  ],
}
`;

exports[`QueryBuilder pagination by offset offset cannot be lower than 0 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "offset must be greater than or equal to 0",
      "path": [
        "offset",
      ],
    },
  ],
}
`;

exports[`QueryBuilder pagination by offset offset must be an integer 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "offset must be a \`number\` type, but the final value was: \`NaN\` (cast from the value \`"asdfasdf"\`).",
      "path": [
        "offset",
      ],
    },
  ],
}
`;

exports[`QueryBuilder pagination common (for by cursor) limit cannot be greater than max limit 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "limit must be less than or equal to 1000",
      "path": [
        "limit",
      ],
    },
  ],
}
`;

exports[`QueryBuilder pagination common (for by cursor) limit cannot be lower than 1 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "limit must be greater than or equal to 1",
      "path": [
        "limit",
      ],
    },
  ],
}
`;

exports[`QueryBuilder pagination common (for by cursor) limit must be integer 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "limit must be a \`number\` type, but the final value was: \`NaN\` (cast from the value \`"asdfa"\`).",
      "path": [
        "limit",
      ],
    },
  ],
}
`;

exports[`QueryBuilder pagination common (for by offset) limit cannot be greater than max limit 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "limit must be less than or equal to 1000",
      "path": [
        "limit",
      ],
    },
  ],
}
`;

exports[`QueryBuilder pagination common (for by offset) limit cannot be lower than 1 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "limit must be greater than or equal to 1",
      "path": [
        "limit",
      ],
    },
  ],
}
`;

exports[`QueryBuilder pagination common (for by offset) limit must be integer 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "limit must be a \`number\` type, but the final value was: \`NaN\` (cast from the value \`"asdfa"\`).",
      "path": [
        "limit",
      ],
    },
  ],
}
`;

exports[`QueryBuilder sorting common (for multi) fails for invalid sorting direction 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "sortBy[0].direction must be one of the following values: DESC, ASC",
      "path": [
        "sortBy[0]",
        "direction",
      ],
    },
  ],
}
`;

exports[`QueryBuilder sorting common (for multi) forces to use only allowed sortable fields 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "sortBy[0].field must be one of the following values: foo, bar",
      "path": [
        "sortBy[0]",
        "field",
      ],
    },
  ],
}
`;

exports[`QueryBuilder sorting common (for multi) sortable field is required 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "sortBy[0].field is a required field",
      "path": [
        "sortBy[0]",
        "field",
      ],
    },
  ],
}
`;

exports[`QueryBuilder sorting common (for multi) sorting direction is required 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "sortBy[0].direction is a required field",
      "path": [
        "sortBy[0]",
        "direction",
      ],
    },
  ],
}
`;

exports[`QueryBuilder sorting common (for single) fails for invalid sorting direction 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "sortBy.direction must be one of the following values: DESC, ASC",
      "path": [
        "sortBy",
        "direction",
      ],
    },
  ],
}
`;

exports[`QueryBuilder sorting common (for single) forces to use only allowed sortable fields 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "sortBy.field must be one of the following values: foo, bar",
      "path": [
        "sortBy",
        "field",
      ],
    },
  ],
}
`;

exports[`QueryBuilder sorting common (for single) sortable field is required 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "sortBy.field is a required field",
      "path": [
        "sortBy",
        "field",
      ],
    },
  ],
}
`;

exports[`QueryBuilder sorting common (for single) sorting direction is required 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "sortBy.direction is a required field",
      "path": [
        "sortBy",
        "direction",
      ],
    },
  ],
}
`;

exports[`QueryBuilder sorting multi sorting array cannot be empty 1`] = `
ViolationsList {
  "violations": [
    {
      "message": "sortBy field must have at least 1 items",
      "path": [
        "sortBy",
      ],
    },
  ],
}
`;
